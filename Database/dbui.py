import db
import sqlite3
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QWidget, QInputDialog, QDialog, QFormLayout, QGroupBox, QVBoxLayout, QComboBox, QLabel, QDialogButtonBox, QLineEdit, QTableWidget, QTableWidgetItem, QHeaderView

class UI_Database(QMainWindow):
    def setupUI(self, Database):
        Database.setObjectName("Database")
        self.PopulateTable = QtWidgets.QPushButton(Database)
        self.PopulateTable.setGeometry(QtCore.QRect(10, 10, 150, 45))
        self.PopulateTable.setObjectName("PopulateTable")
        self.CreateTable = QtWidgets.QPushButton(Database)
        self.CreateTable.setGeometry(QtCore.QRect(10, 40, 150, 45))
        self.CreateTable.setObjectName("CreateTable")
        self.DeleteTable = QtWidgets.QPushButton(Database)
        self.DeleteTable.setGeometry(QtCore.QRect(10, 70, 150, 45))
        self.DeleteTable.setObjectName("DeleteTable")
        self.AddEntry = QtWidgets.QPushButton(Database)
        self.AddEntry.setGeometry(QtCore.QRect(10, 100, 150, 45))
        self.AddEntry.setObjectName("AddEntry")
        self.EditEntry = QtWidgets.QPushButton(Database)
        self.EditEntry.setGeometry(QtCore.QRect(10, 130, 150, 45))
        self.EditEntry.setObjectName("EditEntry")
        self.DeleteEntry = QtWidgets.QPushButton(Database)
        self.DeleteEntry.setGeometry(QtCore.QRect(10, 160, 150, 45))
        self.DeleteEntry.setObjectName("DeleteEntry")
        self.SearchTable = QtWidgets.QPushButton(Database)
        self.SearchTable.setGeometry(QtCore.QRect(10, 190, 150, 45))
        self.SearchTable.setObjectName("SearchTable")
        self.OrderTable = QtWidgets.QPushButton(Database)
        self.OrderTable.setGeometry(QtCore.QRect(10, 220, 150, 45))
        self.OrderTable.setObjectName("OrderTable")
        self.ExportGeoJSON = QtWidgets.QPushButton(Database)
        self.ExportGeoJSON.setGeometry(QtCore.QRect(10, 250, 150, 45))
        self.ExportGeoJSON.setObjectName("ExportGeoJSON")

        self.retranslateUI(Database)
        QtCore.QMetaObject.connectSlotsByName(Database)

        self.ExportGeoJSON.clicked.connect(self.export_popup)
        self.OrderTable.clicked.connect(self.order_popup)
        self.SearchTable.clicked.connect(self.search_popup)
        self.DeleteEntry.clicked.connect(self.deleteEntry_popup)
        self.EditEntry.clicked.connect(self.editEntry_popup)
        self.AddEntry.clicked.connect(self.addEntry_popup)
        self.DeleteTable.clicked.connect(self.deleteTable_popup)
        self.CreateTable.clicked.connect(self.createTable_popup)
        self.PopulateTable.clicked.connect(self.populateTable_popup)

    def retranslateUI(self, Database):
        _translate = QtCore.QCoreApplication.translate
        Database.setWindowTitle(_translate("Database", "Database"))
        self.PopulateTable.setText(_translate("Database", "Populate Table"))
        self.CreateTable.setText(_translate("Database", "Create Table"))
        self.DeleteTable.setText(_translate("Database", "Delete Table"))
        self.AddEntry.setText(_translate("Database", "Add Entry"))
        self.EditEntry.setText(_translate("Database", "Edit Entry"))
        self.DeleteEntry.setText(_translate("Database", "Delete Entry"))
        self.SearchTable.setText(_translate("Database", "Search Table"))
        self.OrderTable.setText(_translate("Database", "Order Table"))
        self.ExportGeoJSON.setText(_translate("Database", "Export GeoJSON"))

    def export_popup(self):
        exportGroupBox = QGroupBox("Export table to GeoJSON")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        layout = QFormLayout()
        layout.addRow(QLabel("Export"), tablename)
        exportGroupBox.setLayout(layout)
        exportButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainExportLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainExportLayout)
        mainExportLayout.addWidget(exportGroupBox)
        mainExportLayout.addWidget(exportButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        exportButtonBox.accepted.connect(lambda: db.exportTable(tablename.currentText()))
        exportButtonBox.accepted.connect(self.close)
        exportButtonBox.rejected.connect(self.close)

    def order_popup(self):
        orderGroupBox = QGroupBox("Order Database Table By Feature")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        feature = QComboBox()
        feature.addItems(['id', 'row', 'col', 
            'coord1x', 'coord1y', 'coord2x', 'coord2y', 
            'coord3x', 'coord3y', 'coord4x', 'coord4y', 
            'centx', 'centy'])
        order = QComboBox()
        order.addItems(['asc', 'desc'])
        layout = QFormLayout()
        layout.addRow(QLabel("Table"), tablename)
        layout.addRow(QLabel("Feature"), feature)
        layout.addRow(QLabel("Order"), order)
        orderGroupBox.setLayout(layout)
        orderButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainOrderLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainOrderLayout)
        mainOrderLayout.addWidget(orderGroupBox)
        mainOrderLayout.addWidget(orderButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        orderButtonBox.accepted.connect(lambda: self.displayTable(
            db.orderTable(
                tablename.currentText(), 
                feature.currentText(), 
                order.currentText())))
        orderButtonBox.rejected.connect(self.close)

    def search_popup(self):
        orderGroupBox = QGroupBox("View Range")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        min_id = QLineEdit()
        min_id.setText('0')
        max_id = QLineEdit()
        layout = QFormLayout()
        layout.addRow(QLabel("Table"), tablename)
        layout.addRow(QLabel("Min ID"), min_id)
        layout.addRow(QLabel("Max ID"), max_id)
        orderGroupBox.setLayout(layout)
        orderButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainOrderLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainOrderLayout)
        mainOrderLayout.addWidget(orderGroupBox)
        mainOrderLayout.addWidget(orderButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        orderButtonBox.accepted.connect(lambda: self.displayTable(db.searchTable(tablename.currentText(), min_id.text(), max_id.text())))
        orderButtonBox.rejected.connect(self.close)
        return 

    def displayTable(self, ordered_list):
        ordered_table = QTableWidget()
        if ordered_list == None:
            ordered_list = []
        ordered_table.setRowCount(len(ordered_list))
        ordered_table.setColumnCount(13)
        ordered_table.setFixedWidth(ordered_table.columnWidth(0) * 13)
        count = 0
        for hid, row, col, coord1x, coord1y, coord2x, coord2y, coord3x, coord3y, coord4x, coord4y, centx, centy in ordered_list:
            print(hid, row, col, coord1x, coord1y, coord2x, coord2y, coord3x, coord3y, coord4x, coord4y, centx, centy)
            ordered_table.setItem(0 + count, 0, QTableWidgetItem(str(hid)))
            ordered_table.setItem(0 + count, 1, QTableWidgetItem(str(row)))
            ordered_table.setItem(0 + count, 2, QTableWidgetItem(str(col)))
            ordered_table.setItem(0 + count, 3, QTableWidgetItem(str(coord1x)))
            ordered_table.setItem(0 + count, 4, QTableWidgetItem(str(coord1y)))
            ordered_table.setItem(0 + count, 5, QTableWidgetItem(str(coord2x)))
            ordered_table.setItem(0 + count, 6, QTableWidgetItem(str(coord2y)))
            ordered_table.setItem(0 + count, 7, QTableWidgetItem(str(coord3x)))
            ordered_table.setItem(0 + count, 8, QTableWidgetItem(str(coord3y)))
            ordered_table.setItem(0 + count, 9, QTableWidgetItem(str(coord4x)))
            ordered_table.setItem(0 + count, 10, QTableWidgetItem(str(coord4y)))
            ordered_table.setItem(0 + count, 11, QTableWidgetItem(str(centx)))
            ordered_table.setItem(0 + count, 12 , QTableWidgetItem(str(centy)))
            count += 1
        features = ['id', 'row', 'col', 
            'coord1x', 'coord1y', 'coord2x', 'coord2y', 
            'coord3x', 'coord3y', 'coord4x', 'coord4y', 
            'centx', 'centy']
        ordered_table.setHorizontalHeaderLabels(features)
        ordered_table.horizontalHeader().setStretchLastSection(True)
        ordered_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        layout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(layout)
        layout.addWidget(ordered_table)
        self.setCentralWidget(central_widget)
        self.show()
        return

    def deleteEntry_popup(self):
        orderGroupBox = QGroupBox("Headstone To Delete")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        hid = QComboBox()
        hid.addItems(db.getIDs(tablename.currentText()))
        layout = QFormLayout()
        layout.addRow(QLabel("Table"), tablename)
        layout.addRow(QLabel("ID"), hid)
        orderGroupBox.setLayout(layout)
        orderButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainOrderLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainOrderLayout)
        mainOrderLayout.addWidget(orderGroupBox)
        mainOrderLayout.addWidget(orderButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        orderButtonBox.accepted.connect(lambda: db.deleteEntry(tablename.currentText(), hid.currentText()))
        orderButtonBox.accepted.connect(self.close)
        orderButtonBox.rejected.connect(self.close)

    def editEntry_popup(self):
        orderGroupBox = QGroupBox("Edit An Entry")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        hid = QComboBox()
        hid.addItems(db.getIDs(tablename.currentText()))
        row = QLineEdit()
        col = QLineEdit()
        coord1x = QLineEdit()
        coord1y = QLineEdit()
        coord2x = QLineEdit()
        coord2y = QLineEdit()
        coord3x = QLineEdit()
        coord3y = QLineEdit()
        coord4x = QLineEdit()
        coord4y = QLineEdit()
        centx = QLineEdit()
        centy = QLineEdit()
        layout = QFormLayout()
        layout.addRow(QLabel("Table"), tablename)
        layout.addRow(QLabel("ID"), hid)
        layout.addRow(QLabel("row"), row)
        layout.addRow(QLabel("col"), col)
        layout.addRow(QLabel("coord1x"), coord1x)
        layout.addRow(QLabel("coord1y"), coord1y)
        layout.addRow(QLabel("coord2x"), coord2x)
        layout.addRow(QLabel("coord2y"), coord2y)
        layout.addRow(QLabel("coord3x"), coord3x)
        layout.addRow(QLabel("coord3y"), coord3y)
        layout.addRow(QLabel("coord4x"), coord4x)
        layout.addRow(QLabel("coord4y"), coord4y)
        layout.addRow(QLabel("centx"), centx)
        layout.addRow(QLabel("centy"), centy)
        orderGroupBox.setLayout(layout)
        orderButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainOrderLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainOrderLayout)
        mainOrderLayout.addWidget(orderGroupBox)
        mainOrderLayout.addWidget(orderButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        hid.activated.connect(lambda: row.setText(db.getRow(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: col.setText(db.getCol(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord1x.setText(db.getCoord1x(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord1y.setText(db.getCoord1y(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord2x.setText(db.getCoord2x(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord2y.setText(db.getCoord2y(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord3x.setText(db.getCoord3x(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord3y.setText(db.getCoord3y(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord4x.setText(db.getCoord4x(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: coord4y.setText(db.getCoord4y(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: centx.setText(db.getCentx(tablename.currentText(), hid.currentText())))
        hid.activated.connect(lambda: centy.setText(db.getCenty(tablename.currentText(), hid.currentText())))
        orderButtonBox.accepted.connect(lambda: db.editEntry(
            tablename.currentText(), hid.text(), row.text(), col.text(), 
            coord1x.text(), coord1y.text(), coord2x.text(), coord2y.text(), 
            coord3x.text(), coord3y.text(), coord4x.text(), coord4y.text(), 
            centx.text(), centy.text()))
        orderButtonBox.accepted.connect(self.close)
        orderButtonBox.rejected.connect(self.close)

    def addEntry_popup(self):
        orderGroupBox = QGroupBox("Add An Entry")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        hid = QLineEdit()
        row = QLineEdit()
        col = QLineEdit()
        coord1x = QLineEdit()
        coord1y = QLineEdit()
        coord2x = QLineEdit()
        coord2y = QLineEdit()
        coord3x = QLineEdit()
        coord3y = QLineEdit()
        coord4x = QLineEdit()
        coord4y = QLineEdit()
        centx = QLineEdit()
        centy = QLineEdit()
        layout = QFormLayout()
        layout.addRow(QLabel("Table"), tablename)
        layout.addRow(QLabel("ID"), hid)
        layout.addRow(QLabel("row"), row)
        layout.addRow(QLabel("col"), col)
        layout.addRow(QLabel("coord1x"), coord1x)
        layout.addRow(QLabel("coord1y"), coord1y)
        layout.addRow(QLabel("coord2x"), coord2x)
        layout.addRow(QLabel("coord2y"), coord2y)
        layout.addRow(QLabel("coord3x"), coord3x)
        layout.addRow(QLabel("coord3y"), coord3y)
        layout.addRow(QLabel("coord4x"), coord4x)
        layout.addRow(QLabel("coord4y"), coord4y)
        layout.addRow(QLabel("centx"), centx)
        layout.addRow(QLabel("centy"), centy)
        orderGroupBox.setLayout(layout)
        orderButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainOrderLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainOrderLayout)
        mainOrderLayout.addWidget(orderGroupBox)
        mainOrderLayout.addWidget(orderButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        orderButtonBox.accepted.connect(lambda: db.addEntry(
            tablename.currentText(), hid.text(), row.text(), col.text(), 
            coord1x.text(), coord1y.text(), coord2x.text(), coord2y.text(), 
            coord3x.text(), coord3y.text(), coord4x.text(), coord4y.text(), 
            centx.text(), centy.text()))
        orderButtonBox.accepted.connect(self.close)
        orderButtonBox.rejected.connect(self.close)

    def deleteTable_popup(self):
        deleteGroupBox = QGroupBox("Delete Table")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        layout = QFormLayout()
        layout.addRow(QLabel("Delete"), tablename)
        deleteGroupBox.setLayout(layout)
        deleteButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainDeleteLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainDeleteLayout)
        mainDeleteLayout.addWidget(deleteGroupBox)
        mainDeleteLayout.addWidget(deleteButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        deleteButtonBox.accepted.connect(lambda: db.deleteTable(tablename.currentText()))
        deleteButtonBox.accepted.connect(self.close)
        deleteButtonBox.rejected.connect(self.close)

    def createTable_popup(self):
        table, ok = QInputDialog.getText(self, "Enter Table To Create", "Table To Create:")
        if ok and table:
            db.createTable(table)

    # ***(VERSION 1)*** NOTE: Needs container to be passed from import.
    # def populateTable_popup(self):
    #     table, ok = QInputDialog.getText(self, "Enter Table To Auto-Populate", "Table To Auto-Populate:")
    #     if ok and table:
    #         db.populateTable(table, container)

    # ***(VERESION 2)*** NOTE:Needs container to be passed from import.
    def populateTable_popup(self):
        populateGroupBox = QGroupBox("Populate Table")
        tablename = QComboBox()
        tablename.addItems(db.getTables())
        layout = QFormLayout()
        layout.addRow(QLabel("Populate"), tablename)
        populateGroupBox.setLayout(layout)
        populateButtonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        mainPopulateLayout = QVBoxLayout()
        central_widget = QWidget()
        central_widget.setLayout(mainPopulateLayout)
        mainPopulateLayout.addWidget(populateGroupBox)
        mainPopulateLayout.addWidget(populateButtonBox)
        self.setCentralWidget(central_widget)
        self.show()
        populateButtonBox.accepted.connect(lambda: db.populateTable(tablename.currentText(), container))
        populateButtonBox.accepted.connect(self.close)
        populateButtonBox.rejected.connect(self.close)

    # ***(VERSION 3)*** NOTE: Instead of passing a table name from user input, just call function on line 49 above.
    # This requires commenting out lines 333-350, then proceed by adjusting line 49, as such:
    # self.PopulateTable.clicked.connect(db.populateTable(tablename, container)), where tablename and container are passed from external code.

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Database = QtWidgets.QWidget()
    ui = UI_Database()
    ui.setupUI(Database)
    Database.show()
    sys.exit(app.exec_())
